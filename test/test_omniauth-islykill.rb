require 'minitest/autorun'
require 'omniauth-islykill'

class IslykillTest < Minitest::Test
  def test_signed_xml
    token_base64 = ""
    islykill_xml_saml_response = Base64.decode64(token_base64)
    signedDocument = SignedXml::Document(islykill_xml_saml_response)
    if !signedDocument.is_verified?
        raise OmniAuth::Strategies::Islykill::ValidationError.new("Islykill response not valid")
    end

    # response is valid so we extract the information using xpath
    xml_doc = REXML::Document.new(islykill_xml_saml_response)

    prefix='Response/Assertion/AttributeStatement/Attribute[@Name="'
    postfix='"]/AttributeValue'

    @attributes={        
        name: REXML::XPath.first(xml_doc,"#{prefix}uid#{postfix}").text,
        kennitala: REXML::XPath.first(xml_doc,"#{prefix}mail#{postfix}").text,
        provider: REXML::XPath.first(xml_doc,"#{prefix}eduPersonAffiliation#{postfix}").text
    }
    
    @name_id = REXML::XPath.first(xml_doc,"Response/Assertion/Subject/NameID/@NameQualifier").value()

    if @name_id.nil? || @name_id.empty?
      raise OmniAuth::Strategies::Islykill::ValidationError.new("SAML response missing 'name_id'")
    end

  end
   
end